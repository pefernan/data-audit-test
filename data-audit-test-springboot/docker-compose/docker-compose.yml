#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

version: '2.1'

services:

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"

  postgres:
    container_name: postgres
    image: postgres:13.4-alpine3.14
    ports:
      - "5432:5432"
    volumes:
      - ./sql:/docker-entrypoint-initdb.d:Z
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "kogito", "-U", "kogito-user" ]
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:7.8
    ports:
      - 8055:80
    depends_on:
      - postgres
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
    environment:
      PGADMIN_DEFAULT_EMAIL: user@user.org
      PGADMIN_DEFAULT_PASSWORD: pass

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-postgresql:${KOGITO_VERSION}
    ports:
      - "8180:8080"
      - "5006:5005"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    volumes:
      - ./persistence:/home/kogito/data/protobufs/
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgres:5432/kogito"
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
      QUARKUS_FLYWAY_MIGRATE_AT_START: "true"
      QUARKUS_FLYWAY_BASELINE_ON_MIGRATE: "true"
      QUARKUS_FLYWAY_TABLE: FLYWAY_DATAINDEX_SERVICE
      QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION: update
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/
      KOGITO_DATA_INDEX_QUARKUS_PROFILE: "kafka-events-support"
      JAVA_OPTIONS: -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    extra_hosts:
      - "${DOCKER_GATEWAY_HOST}:host-gateway"

  jobs-service:
    container_name: jobs-service
    image: quay.io/kiegroup/kogito-jobs-service-postgresql:${KOGITO_VERSION}
    ports:
      - "8580:8080"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      QUARKUS_PROFILE: "kafka-events-support"
      QUARKUS_DATASOURCE_JDBC_URL: "jdbc:postgresql://postgres:5432/kogito"
      QUARKUS_DATASOURCE_REACTIVE_URL: "postgresql://postgres:5432/kogito"
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_FLYWAY_TABLE: FLYWAY_JOBS_SERVICE
      QUARKUS_FLYWAY_BASELINE_ON_MIGRATE: "true"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      QUARKUS_HTTP_CORS_ORIGINS: "/.*/"
    extra_hosts:
      - "${DOCKER_GATEWAY_HOST}:host-gateway"

  kogito-example-service:
    container_name: kogito-example-service
    image: dev.local/${USER}/kogito-example-service-springboot:1.0-SNAPSHOT
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/kogito
      KOGITO_SERVICE_URL: http://${DOCKER_GATEWAY_HOST}:8080
      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST}:8180
      KOGITO_JOBS_SERVICE_URL: http://${DOCKER_GATEWAY_HOST}:8580
      JAVA_OPTIONS: -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5005,suspend=n
    extra_hosts:
      - "${DOCKER_GATEWAY_HOST}:host-gateway"

#  keycloak:
#    container_name: keycloak
#    image: quay.io/keycloak/keycloak:legacy
#    ports:
#      - "8480:8080"
#    depends_on:
#      kafka:
#        condition: service_started
#      postgres:
#        condition: service_healthy
#    volumes:
#      - ./keycloak/kogito-realm.json:/tmp/kogito-realm.json
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8080/auth/realms/kogito" ]
#      interval: 2s
#      timeout: 2s
#      retries: 100
#    environment:
#      DB_VENDOR: POSTGRES
#      DB_ADDR: postgres
#      DB_DATABASE: keycloak
#      DB_USER: kogito-user
#      DB_SCHEMA: public
#      DB_PASSWORD: kogito-pass
#      KEYCLOAK_USER: admin
#      KEYCLOAK_PASSWORD: admin
#      KEYCLOAK_IMPORT: /tmp/kogito-realm.json
#
#  management-console:
#    container_name: management-console
#    image: quay.io/kiegroup/kogito-management-console:${KOGITO_VERSION}
#    ports:
#      - 8280:8080
#    depends_on:
#      data-index:
#        condition: service_started
#      keycloak:
#        condition: service_healthy
#    volumes:
#      - ./svg/:/home/kogito/data/svg/
#    environment:
#      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8180/graphql
#      KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration -Dkogito.svg.folder.path=/home/kogito/data/svg
#
#  task-console:
#    container_name: task-console
#    image: quay.io/kiegroup/kogito-task-console:${KOGITO_VERSION}
#    ports:
#      - 8380:8080
#    depends_on:
#      data-index:
#        condition: service_started
#      keycloak:
#        condition: service_healthy
#    environment:
#      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST:-host.docker.internal}:8180/graphql
#      KOGITO_TASK_CONSOLE_PROPS: -Dkogito.consoles.keycloak.config.url=http://localhost:8480/auth -Dkogito.consoles.keycloak.config.health-check-url=http://localhost:8480/auth/realms/kogito/.well-known/openid-configuration